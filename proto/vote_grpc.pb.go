// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/vote.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VoteClient is the client API for Vote service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VoteClient interface {
	ListVotesInVideo(ctx context.Context, in *ListVotesInVideoRequest, opts ...grpc.CallOption) (*ListVotesInVideoResponse, error)
	ListVotesOfUser(ctx context.Context, in *ListVotesOfUserRequest, opts ...grpc.CallOption) (*ListVotesOfUserResponse, error)
	Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*InsertResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	UpdateOne(ctx context.Context, in *UpdateOneRequest, opts ...grpc.CallOption) (*UpdateOneResponse, error)
	DeleteOne(ctx context.Context, in *DeleteOneRequest, opts ...grpc.CallOption) (*DeleteOneResponse, error)
}

type voteClient struct {
	cc grpc.ClientConnInterface
}

func NewVoteClient(cc grpc.ClientConnInterface) VoteClient {
	return &voteClient{cc}
}

func (c *voteClient) ListVotesInVideo(ctx context.Context, in *ListVotesInVideoRequest, opts ...grpc.CallOption) (*ListVotesInVideoResponse, error) {
	out := new(ListVotesInVideoResponse)
	err := c.cc.Invoke(ctx, "/proto.Vote/ListVotesInVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteClient) ListVotesOfUser(ctx context.Context, in *ListVotesOfUserRequest, opts ...grpc.CallOption) (*ListVotesOfUserResponse, error) {
	out := new(ListVotesOfUserResponse)
	err := c.cc.Invoke(ctx, "/proto.Vote/ListVotesOfUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteClient) Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*InsertResponse, error) {
	out := new(InsertResponse)
	err := c.cc.Invoke(ctx, "/proto.Vote/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/proto.Vote/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteClient) UpdateOne(ctx context.Context, in *UpdateOneRequest, opts ...grpc.CallOption) (*UpdateOneResponse, error) {
	out := new(UpdateOneResponse)
	err := c.cc.Invoke(ctx, "/proto.Vote/UpdateOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteClient) DeleteOne(ctx context.Context, in *DeleteOneRequest, opts ...grpc.CallOption) (*DeleteOneResponse, error) {
	out := new(DeleteOneResponse)
	err := c.cc.Invoke(ctx, "/proto.Vote/DeleteOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VoteServer is the server API for Vote service.
// All implementations must embed UnimplementedVoteServer
// for forward compatibility
type VoteServer interface {
	ListVotesInVideo(context.Context, *ListVotesInVideoRequest) (*ListVotesInVideoResponse, error)
	ListVotesOfUser(context.Context, *ListVotesOfUserRequest) (*ListVotesOfUserResponse, error)
	Insert(context.Context, *InsertRequest) (*InsertResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	UpdateOne(context.Context, *UpdateOneRequest) (*UpdateOneResponse, error)
	DeleteOne(context.Context, *DeleteOneRequest) (*DeleteOneResponse, error)
	mustEmbedUnimplementedVoteServer()
}

// UnimplementedVoteServer must be embedded to have forward compatible implementations.
type UnimplementedVoteServer struct {
}

func (UnimplementedVoteServer) ListVotesInVideo(context.Context, *ListVotesInVideoRequest) (*ListVotesInVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVotesInVideo not implemented")
}
func (UnimplementedVoteServer) ListVotesOfUser(context.Context, *ListVotesOfUserRequest) (*ListVotesOfUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVotesOfUser not implemented")
}
func (UnimplementedVoteServer) Insert(context.Context, *InsertRequest) (*InsertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedVoteServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedVoteServer) UpdateOne(context.Context, *UpdateOneRequest) (*UpdateOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOne not implemented")
}
func (UnimplementedVoteServer) DeleteOne(context.Context, *DeleteOneRequest) (*DeleteOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOne not implemented")
}
func (UnimplementedVoteServer) mustEmbedUnimplementedVoteServer() {}

// UnsafeVoteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VoteServer will
// result in compilation errors.
type UnsafeVoteServer interface {
	mustEmbedUnimplementedVoteServer()
}

func RegisterVoteServer(s grpc.ServiceRegistrar, srv VoteServer) {
	s.RegisterService(&Vote_ServiceDesc, srv)
}

func _Vote_ListVotesInVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVotesInVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServer).ListVotesInVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Vote/ListVotesInVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServer).ListVotesInVideo(ctx, req.(*ListVotesInVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vote_ListVotesOfUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVotesOfUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServer).ListVotesOfUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Vote/ListVotesOfUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServer).ListVotesOfUser(ctx, req.(*ListVotesOfUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vote_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Vote/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServer).Insert(ctx, req.(*InsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vote_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Vote/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vote_UpdateOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServer).UpdateOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Vote/UpdateOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServer).UpdateOne(ctx, req.(*UpdateOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vote_DeleteOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServer).DeleteOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Vote/DeleteOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServer).DeleteOne(ctx, req.(*DeleteOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Vote_ServiceDesc is the grpc.ServiceDesc for Vote service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vote_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Vote",
	HandlerType: (*VoteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListVotesInVideo",
			Handler:    _Vote_ListVotesInVideo_Handler,
		},
		{
			MethodName: "ListVotesOfUser",
			Handler:    _Vote_ListVotesOfUser_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _Vote_Insert_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Vote_Get_Handler,
		},
		{
			MethodName: "UpdateOne",
			Handler:    _Vote_UpdateOne_Handler,
		},
		{
			MethodName: "DeleteOne",
			Handler:    _Vote_DeleteOne_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/vote.proto",
}
